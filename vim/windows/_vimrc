source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin

set diffexpr=MyDiff()
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      if empty(&shellxquote)
        let l:shxq_sav = ''
        set shellxquote&
      endif
      let cmd = '"' . $VIMRUNTIME . '\diff"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3
  if exists('l:shxq_sav')
    let &shellxquote=l:shxq_sav
  endif
endfunction

let mapleader = ","
colorscheme industry
" Highlight trailing whitespace
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" Remove trailing whitespace
function! StripTrailingWhitespaces()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfunction
map <leader>w :call StripTrailingWhitespaces()<cr>

" Faster tab opening, opens pwd
map <leader>e :tabe %:h<cr>

" Faster tab switching
map <leader>f :tabnext<cr>
map <leader>a :tabprevious<cr>

" Font settings
set guifont=Courier\ New:h11
" Don't create messy extra files
set nobackup
set noundofile
set noswapfile
" General indentation
set shiftwidth=4 tabstop=4 expandtab
" File-type specific settings
autocmd FileType ruby setlocal shiftwidth=2 tabstop=2 expandtab
autocmd FileType eruby setlocal shiftwidth=2 tabstop=2 expandtab
autocmd FileType java setlocal shiftwidth=4 tabstop=4 expandtab
autocmd FileType sql setlocal shiftwidth=4 tabstop=4 expandtab
autocmd FileType sh setlocal shiftwidth=2 tabstop=2 expandtab
autocmd FileType json setlocal shiftwidth=2 tabstop=2 expandtab
autocmd FileType css setlocal shiftwidth=4 tabstop=4 expandtab
autocmd FileType scss setlocal shiftwidth=4 tabstop=4 expandtab
autocmd FileType less setlocal shiftwidth=2 tabstop=2 expandtab
autocmd FileType cc setlocal shiftwidth=2 tabstop=2 expandtab
autocmd FileType c setlocal shiftwidth=2 tabstop=2 expandtab
autocmd FileType cpp setlocal shiftwidth=2 tabstop=2 expandtab
autocmd FileType javascript setlocal shiftwidth=4 tabstop=4 expandtab
autocmd FileType markdown setlocal tw=80 nonumber

" Show line numbers
set number
highlight LineNr guifg=#adadad
" Don't have lines wrap (looks v messy)
set nowrap
" Always use unix-style formatting
set ffs=unix
" Map to quickly open the current directory in a vspit
map <leader>c :vsplit <bar> :Ex<cr>
" Map to set the current vsplit to be a lil' fatter
map <leader>v :vertical resize 150<cr>
" vsplit mappings
map <leader>s <c-w>h
map <leader>d <c-w>l
map <leader>b <c-w>=

" use ctrlp fuzzy search
set runtimepath^=$HOME/vimfiles/bundle/ctrlp.vim
" Map to ctrlp in this dir (better than in root all the time)
map <leader>t :CtrlP %:h<cr>
" Disable ctrlp's auto find root
let g:ctrlp_working_path_mode = 0
" Custom ignore for ctrlp; node_modules and Java classes
let g:ctrlp_custom_ignore = 'node_modules\|.*\.class'

" This map is AMAZING for your pinkies :)
map <Space> :

" Immediately open a DOS file with dos endings (yuck!)
map <leader>4 :e ++ff=dos<cr>

